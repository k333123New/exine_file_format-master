엑사인용 YPF 파일 포맷

엑사인용 YPF 파일 포맷은 전용 이미지 파일로 종류는 크게 다음과 같이 나누어진다.

=====================================================
1.Tilemap용 이미지
 타일맵용 이미지는 크기가 지정되어 있다는 특징이 있다.
 RGB565형태의 컬러테이블을 가지고 있는 비 압축형 8비트 이미지이다.
 
 타일맵용 이미지의 구조는 아래와 같다
 ---------------------------------------
 [14~525번째 바이트]   : 컬러테이블(RGB565기준 컬러이며 각각 2바이트로 RGB를 표현한다)
 [526~529번째 바이트] : 오프셋 위치(4바이트)
 [536~539번째 바이트] : 타일갯수 (4바이트)
 
 
 알파값=0;
 for(타일 갯수)
 {
  타일높이 = [542+타일번호*24+알파값] ~ [543+타일번호*24+알파값]
  타일너비 = [544+타일번호*24+알파값] ~ [545+타일번호*24+알파값]
  //가끔 다른 경우도 발생하기 때문에 일반적으로 너비는 48, 높이는 24로 고정함. 
  //다른 경우에 대한 대책은 추가적인 연구가 필요함.
  
  if([546+타일번호*24+알파값] == 0x04)
  {
   알파값 8 증가
  }
  
  시작위치인덱스 = [550+타일번호*24+알파값] ~ [553+타일번호*24+알파값]
  데이터길이 = [554+타일번호*24+알파값] ~ [557+타일번호*24+알파값]
  
  그래픽데이터 = [오프셋에_위치한_값 + 시작위치인덱스+ 0 ] ~ [오프셋에_위치한_값 + 시작위치인덱스+ 데이터길이] 
  
  컬러그래픽데이터 = 그래픽데이터의_값을 컬러테이블의 위치로 변환하여 저장
  //ex 만약 그래픽 데이터가 00이면 2바이트 단위로 구성된 컬러테이블에서 0번째 위치의 컬러정보(0,1번째 데이터) 값으로 대체해주면된다.
  //ex 만약 그래픽 데이터가 01이면 2바이트 단위로 구성된 컬러테이블에서 01째 위치의 컬러정보(2,3번째 데이터) 값으로 대체해주면된다.
  
 }
 ---------------------------------------
=====================================================

=====================================================
2.비압축형 RGB565 16비트이미지
 비압축형 이미지는 구조가 간단하다는 특징이 있다.
 또한 컬러테이블 없이 바로 그래픽 데이터에 컬러가 포함되어있다.
 이미지 구조는 다음과 같다.
 ---------------------------------------
 [14~17번째 바이트] : 오프셋 위치(4바이트)
 
 파일인덱스 = 0
 [6~9번째 바이트] : 파일타입
 if(파일타입 == 3) 파일인덱스 = 30;
 
 무한반복
 {
  높이 = [파일인덱스+0]~[파일인덱스+1]
  너비 = [파일인덱스+2]~[파일인덱스+3]
  if(너비==0) 다음 반복문 진행
  if(높이==0) 다음 반복문 진행
  타입 = [파일인덱스+4] ~ [파일인덱스+7]
  
  if(타입==0x0c)
  {
   시작지점 = [파일인덱스+8]~[파일인덱스+11]
   길이 = [파일인덱스+12]~[파일인덱스+15]
   
   //순서대로리스트에저장(시작지점+오프셋, 시작지점+길이, 너비,높이)
   해당_이미지_데이터 = [시작지점+오프셋] ~ [시작지점+길이]
   //만약 이미지 데이터에서 빈 정보를 마젠타로 바꾸고 싶으면 2바이트씩 읽으면서 두바이트가 모두 0x00인것을 0x1f, 0xf8로 변경하면됨)
   //마젠타로 바꿔두면 향후 투명화 작업시 툴 사용이 용이함
   
   파일인덱스 24 증가
  }
  else if (타입 == 0x04)
  {
   파일인덱스 32 증가
  }
  else
  {
   파일인덱스 증가
   다음 반복문 진행
  }
  
  if(파일인덱스 > 오프셋) 무한반복종료
 }
 
 
 
 ---------------------------------------
=====================================================
 
=====================================================
3.압축형 8비트 이미지
 압축형 8비트 이미지는 비압축 8형을 기본으로 하여 형태를 압축한 구조이다.
 ---------------------------------------
 
 ---------------------------------------
=====================================================
 
=====================================================
4.압축형 RGB565 16비트 이미지
 압축형 RGB565 이미지는 비압축 RGB565형을 기본으로 하여 형태를 압축한 구조이다.
 ---------------------------------------
 
 ---------------------------------------
=====================================================


=====================================================
5.압축형 8비트 휴먼 케릭터용 이미지
 압축형 8비트 이미지는 비압축 8형을 기본으로 하여 형태를 압축한 구조이다.
 다른 이미지들과 다르게 위치값이 존재하며 이 부분이 매우 중요하다.
 실제로 무기, 방어구, 갑옷, 머리 등이 여기에 해당하며 프레임 번호, 액션순서, 액션 및 프레임별 그리기 순서 등 다양한 정보를 적용해야한다.
 ---------------------------------------
---------------------------------------
 [14~525번째 바이트]   : 컬러테이블(RGB565기준 컬러이며 각각 2바이트로 RGB를 표현한다)
 [526~529번째 바이트] : 오프셋 위치(4바이트)
 [536~537번째 바이트] : 프레임갯수 (2바이트)
 [526+12+49*프레임갯수]~ [527+12+49*프레임갯수] : 액션갯수

임시인덱스 = 2
for(액션갯수)
{
 임시인덱스 16증가
 현재액션의구성프레임수 = [526+12+49*프레임갯수+임시인덱스]~[527+12+49*프레임갯수+임시인덱스]
 임시인덱스 2증가
 
 for(현재액션의구성프레임수)
 {
   프레임인덱스번호 =  [526+12+49*프레임갯수+임시인덱스]~[527+12+49*프레임갯수+임시인덱스]
   임시인덱스 2증가
   
   해당프레임유지시간? = [526+12+49*프레임갯수+임시인덱스]~[529+12+49*프레임갯수+임시인덱스]
   //참고로 현재는 프레임유지시간은 사용하지 않았음.
   
   임시인덱스 12증가
 } 
 //각 액션별 프레임인덱스 번호는 별도로 저장해둔다.
 //참고로 각은 액션에서의 프레임인덱스 번호는 머리,몸통,무기,방어구 모두 동일한 프레임 번호를 사용한다.
 //해당 YPF 파일에 해당 액션이 없으면 현재액션의 구성 프레임수가 0이기 때문에 나중에 조합 시 해당 YPF에서 가능한 액션인지 확인이 가능하다.
 
}
 
//실제 각 프레임정보 추출
for(프레임갯수)
{
  //참고: 여기서의 top, left, bottom, right는 절대좌표값(0,0) 기준으로 이미지가 그려지는 Rect의 좌표값이며 부호가 있다.
  top = [526+12+49*프레임번호]~[526+13+49*프레임번호]
  left = [526+14+49*프레임번호]~[526+15+49*프레임번호]
  bottom = [526+16+49*프레임번호]~[526+17+49*프레임번호]
  right = [526+18+49*프레임번호]~[526+19+49*프레임번호]
  
  //압축된 이미지 정보 추출
  알파정보길이 = [526+24+49*프레임번호]~[529+24+49*프레임번호]
  알파정보시작점 = [526+24+49*프레임번호]~[529+24+49*프레임번호]
  베이스시작점 = [526+32+49*프레임번호]~[529+32+49*프레임번호]
  베이스종료지점 = [526+36+49*프레임번호]~[529+36+49*프레임번호]
  
  가로인덱스=0
  높이값=0
  
  가로정보리스트
  
  무한반복
  {
   가로정보1 = [알파정보시작점+0+4*가로인덱스]~[알파정보시작점+3+4*가로인덱스]
   가로정보2 = [알파정보시작점+0+4*가로인덱스+1]~[알파정보시작점+3+4*가로인덱스+1]
   
   if(가로정보2[2]가 0이 아니거나 , 가로정보2[3]이 2이 아니면)
   {
    무한반복 탈출
   }
   
   가로인덱스 1증가
   
   높이값 1증가
   가로정보리스트.add(가로정보2-가로정보1)
   
   인덱스 = 알파시작지점+4*(가로인덱스+1));
  }
  
  인덱스 1감소
  
  //실제 확보된 정보를 바탕으로 이미지형태를 그려냄
  for(높이값)
  {
   무한반복
   {
    데이터1 = [++인덱스]
    데이터2 = [++인덱스]
     
    if(인덱스 > 베이스시작점) 무한반복 탈출
    
    for(int j=0; j<((데이터1 & 7) << 8 |  데이터2); j++)
    {
     그래픽데이터.add(데이터1 & 0xf8)
    }
    
   }
   
  }
  
  //이미지형태에 순차적으로 채워질 색상 정보 가져옴
  for(uint j = 베이스시작점; j<베이스종료지점; j++)
  {
   컬러데이터에 [j]추가
  }
  
  //컬러이미지생성
  for(그래픽데이터갯수)
  {
    //만약 이미지 데이터에서 빈 정보를 마젠타로 바꾸고 싶으면 바이트가 0x00인것을 0x1f, 0xf8로 변경하면됨
    
    try
    {
    컬러그래픽데이터.add(컬러테이블[컬러데이터[컬러데이터인덱스]*2+0]);
    컬러그래픽데이터.add(컬러테이블[컬러데이터[컬러데이터인덱스]*2+1]);
    
    컬러데이터엔덱스 1증가
    }
    catch(Exception ex)
    {
     continue;
    }
  }
  
  //마지막에 한칸이 비어있기 때문에 채워줌
  컬러그래픽데이터.add(0x1f)
  컬러그래픽데이터.add(0xf8)
  
  프레임너비 = ((컬러그래픽데이터.count/2)/(높이))
  프레임높이 = 높이+1
  
  //여기까지가 한 프레임이다.
  //필자의 경우 절대 위치에 맞춰서 그려주기 위해서 500*500의 이미지에 RECT 정보를 추가로 반영하여 그려주었다.
  //이를 투명화 하여 머리,몸통등을 겹쳐주면 위치에 맞게 이미지가 출력된다.
  //가장 좋은 방법은 Rect값에 맞춰서 실제로 해당 이미지만 그려주는 것이다.
  //유니티에서는 까다로운 형식이여서 우선 앞서 언급한 형태로 진행하였다.
 
}
 

=====================================================
6.압축형 8비트 건물 이미지
 압축형 8비트 이미지는 비압축 8형을 기본으로 하여 형태를 압축한 구조이다.
 다른 이미지들과 다르게 위치값이 존재하며 이 부분이 지도에 실제로 추가시킬때 매우 중요하다.
 해당 부분과 타일맵 YPF, .map 파일부분을 같이 볼것을 권장한다.
 ---------------------------------------

 ---------------------------------------
=====================================================
 
